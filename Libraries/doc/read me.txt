【MDK工程的配置】
    各个版本的工程区别主要是如下配置：
    “C/C++”选项配置中的宏、
    “Debug”选项使用的调试文件、
    “Linker”选项使用的分散加载文件
  
nor_zf_ram工程：
  “C/C++”选项配置中的宏：
      CPU_MIMXRT1021DAG5A,
      XIP_EXTERNAL_FLASH=1, 
      SKIP_SYSCLK_INIT,
      XIP_BOOT_HEADER_ENABLE =1,
      PRINTF_FLOAT_ENABLE=1,
      SCANF_FLOAT_ENABLE=1, 
      PRINTF_ADVANCED_ENABLE=1, 
      SCANF_ADVANCED_ENABLE=1,
	  FSL_DRIVER_TRANSFER_DOUBLE_WEAK_IRQ=0
  “Debug”选项使用的调试文件：
      evkbimxrt1020_flexspi_nor.ini
  “Linker”选项使用的分散加载文件：
    RT1021_nor_zf_ram.scf
    
    
【IAR工程的配置】
    各个版本的工程区别主要是如下配置：
    Defined symbols中的宏、
    linker 配置文件、
  
nor_zf_ram工程：
  “C/C++”选项配置中的宏：
      CPU_MIMXRT1021DAG5A
      XIP_EXTERNAL_FLASH=1
      SKIP_SYSCLK_INIT
      XIP_BOOT_HEADER_ENABLE =1
      PRINTF_FLOAT_ENABLE=1
      SCANF_FLOAT_ENABLE=1
      PRINTF_ADVANCED_ENABLE=1
      SCANF_ADVANCED_ENABLE=1
	  FSL_DRIVER_TRANSFER_DOUBLE_WEAK_IRQ=0
  “Linker”选项使用的分散加载文件：
    MIMXRT1021xxxxx_flexspi_nor.icf
    
    

【核心板相关的存储器说明】

    RT1021芯片内部有RAM存储器，内部无用户可使用的ROM存储器

    ITCM：指令紧耦合缓存（Instruction Tightly-Coupled Memory），
        默认大小为64KB。总线宽度为64位，查阅Arm Cortex-M7 Processor PDF中关于TCM interfaces介绍可知。
        用于缓存需要高速执行的指令。
        基地址为：0x0000 0000 

    DTCM：数据紧耦合缓存（Data Tightly-Coupled Memory），
        默认大小为64KB。总线宽度为两个32位，查阅Arm Cortex-M7 Processor PDF中关于TCM interfaces介绍可知。
        用于缓存需要高速访问的数据。
        基地址为：0x2000 0000

    OCRAM：片上RAM（On-Chip RAM），
        默认大小为128KB，总线宽度为32位，
        用于缓存数据。
        基地址为：0x2020 0000
        
        以上三个RAM存储器共享RT1021 256KB的RAM。无论如何调整它们的大小，想加之和都务必等于256KB。

    核心板上的存储器：
        默认使用W25Q64JV型号的SPI NorFlash，大小为8MB，
        它连接至RT1021的FlexSPI外设的A1端口，
        用于掉电保存程序代码，支持XIP
        基地址为：0x6000 0000
        
        
【本库对RAM的分配说明】
    
    DTCM 128KB
    ITCM 64KB
    SRAM 64KB
    
    定义的变量存放在 DTCM区域
    定义的noncache 放在DTCM区域
    堆栈放在DTCM区域


本库对官方SDK修改有如下几点
    修复PWM不能满占比输出的问题
    修改PWM分步值（精度）
	修改pwm_signal_param_t结构体中的dutyCyclePercent改为32位变量
    修改SPI查询发送函，修改DMA传输字节数
    FLEXSPI_TransferBlocking函数设置为nocache
    FLEXSPI_WriteBlocking函数设置为nocache
    FLEXSPI_ReadBlocking函数设置为nocache
    增加FLEXSPI_CheckAndClearError_noncache函数供RAM中的函数调用
    将FLEXSPI_CheckAndClearError_noncache函数中的标志位清除函数替换为寄存器操作
	将flexspi_init函数内的时钟开启函数替换为对应的内容，方便将程序放入RAM运行
